//@@Assignment Task One@@

//Define the Grid World Size

#include "C:\Users\ryanw\Nextcloud\University\Year 4\3806 Robotics, Agents and Reasoning\Assignment\robotics-assignment-2\test\10_pat.csp";

//Set World Parameters
#define O 3;
#define H 2;
#define S 0;
#define G 1;


// Set the Starting position:
var r:{0..N-1} = 1; //row
var c:{0..M-1} = 1; //column

//Game Choices available to PAT
Game() =  [r-1>=0]MoveUp	//Can run move up as long as it won't allow you to exit the world
          [] [r+1<N]MoveDown //Can run move down as long as it won't allow you to move past the bottom wall 
          [] [c-1>=0]MoveLeft  //Can run move left as long as it won't allow you to move past left wall
          [] [c+1<M]MoveRight; //Can run move right as long as it won't allow you to move past the right wall

MoveUp = [board[r-1][c]==O || board[r-1][c] == G]go_up{r=r-1} -> Game;	//Guarded process that checks the cell above is Open
MoveDown = [board[r+1][c]==O || board[r+1][c]==G]go_down{r=r+1} -> Game; //Guarded process that checks the cell below is Open
MoveLeft = [board[r][c-1]==O || board[r][c-1]==G]go_left{c=c-1} -> Game; //Guarded process that checks the cell to the left is Open
MoveRight = [board[r][c+1]==O || board[r][c+1]==G]go_right{c=c+1} -> Game; //Guarded process that checks the cell to the right is Open

#define goal board[r][c] == G; //Define the goal position
#assert Game reaches goal; //Verify that the goal state can be reached


